name: Showcase nonstd::source_location on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Ubuntu 20.04 gcc-9",
              os: ubuntu-20.04,
              build_type: Release,
              c_compiler: "gcc-9", cpp_compiler: "g++-9"
            }
          - {
                name: "Ubuntu 20.04 gcc-10",
                os: ubuntu-20.04,
                build_type: Release,
                c_compiler: "gcc-10", cpp_compiler: "g++-10"
            }
          - {
              name: "Ubuntu 22.04 gcc-11",
              os: ubuntu-22.04,
              build_type: Release,
              c_compiler: "gcc-11", cpp_compiler: "g++-11"
            }
          - {
                name: "Ubuntu 22.04 gcc-12",
                os: ubuntu-22.04,
                build_type: Release,
                c_compiler: "gcc-12", cpp_compiler: "g++-12"
            }
          - {
              name: "Ubuntu 20.04 clang-10",
              os: ubuntu-20.04,
              build_type: Release,
              c_compiler: "clang-10", cpp_compiler: "clang++-10"
            }
          - {
              name: "Ubuntu 20.04 clang-11",
              os: ubuntu-20.04,
              build_type: Release,
              c_compiler: "clang-11", cpp_compiler: "clang++-11"
            }
          - {
                name: "Ubuntu 20.04 clang-12",
                os: ubuntu-20.04,
                build_type: Release,
                c_compiler: "clang-12", cpp_compiler: "clang++-12"
            }
          - {
              name: "Ubuntu 22.04 clang-13",
              os: ubuntu-22.04,
              build_type: Release,
              c_compiler: "clang-13", cpp_compiler: "clang++-13"
            }
          - {
                name: "Ubuntu 22.04 clang-14",
                os: ubuntu-22.04,
                build_type: Release,
                c_compiler: "clang-14", cpp_compiler: "clang++-14"
            }
          - {
                name: "Ubuntu 22.04 clang-15",
                os: ubuntu-22.04,
                build_type: Release,
                c_compiler: "clang-15", cpp_compiler: "clang++-15"
            }
          - {
                name: "macOS 14 Arm64 clang",
                os: macos-14,
                build_type: Release,
                c_compiler: "clang", cpp_compiler: "clang++"
            }

    steps:
    - uses: actions/checkout@v4

    - name: Install apt packages
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install -y ninja-build
      shell: sh

    - name: Install brew packages
      if: runner.os == 'macOS'
      run: |
        brew update
        echo "ninja" | xargs -n 1 brew install
      shell: sh

    - name: Setup build environment
      id: build_env
      shell: sh
      run: |
        echo "cmake-generator=\"Ninja\"" >> "$GITHUB_OUTPUT"
        mkdir -p ${HOME}/prefix_root/usr/includes && mkdir -p ${HOME}/prefix_root/usr/lib && mkdir -p ${HOME}/prefix_root/usr/share
        echo "library-build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "examples-with-exported-cmake-build-output-dir=${{ github.workspace }}/examples/build_exported_cmake" >> "$GITHUB_OUTPUT"
        echo "examples-with-pkg-config-build-output-dir=${{ github.workspace }}/examples/build_pkg_config" >> "$GITHUB_OUTPUT"
        echo "prefix_root=${HOME}/prefix_root" >> "$GITHUB_OUTPUT"
        echo "library-source-dir=${{ github.workspace }}" >> "$GITHUB_OUTPUT"
        echo "examples-source-dir=${{ github.workspace }}/examples" >> "$GITHUB_OUTPUT"

    - name: Configure nonstd::source_location CMake
      run: >
        cmake -B ${{ steps.build_env.outputs.library-build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.config.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.config.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
        -DSOURCE_LOCATION_BUILD_TESTS=false
        -DCMAKE_INSTALL_PREFIX=${{ steps.build_env.outputs.prefix_root }}
        -S ${{ steps.build_env.outputs.library-source-dir }}

    - name: Install nonstd::source_location
      run: cmake --build ${{ steps.build_env.outputs.library-build-output-dir }} --target install --config ${{ matrix.config.build_type }}

    - name: Configure showcase application CMake (nonstd::source_location exported cmake target)
      run: >
        cmake -B ${{ steps.build_env.outputs.examples-with-exported-cmake-build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.config.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.config.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
        -DEXAMPLES_USE_CMAKE_CMAKE_CONFIG=true
        -DCMAKE_FIND_ROOT_PATH=${{ steps.build_env.outputs.prefix_root }}
        -S ${{ steps.build_env.outputs.examples-source-dir }}

    - name: Build showcase application (nonstd::source_location exported cmake target)
      run: cmake --build ${{ steps.build_env.outputs.examples-with-exported-cmake-build-output-dir }} --config ${{ matrix.config.build_type }}

    - name: Run showcase application (nonstd::source_location exported cmake target)
      working-directory: ${{ steps.build_env.outputs.examples-with-exported-cmake-build-output-dir }}
      run: ./source_location_example.app

    - name: Configure showcase application CMake (nonstd::source_location pkg-config .pc file)
      run: >
        cmake -B ${{ steps.build_env.outputs.examples-with-pkg-config-build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.config.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.config.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
        -DCMAKE_PREFIX_PATH=${{ steps.build_env.outputs.prefix_root }}
        -S ${{ steps.build_env.outputs.examples-source-dir }}

    - name: Build showcase application (nonstd::source_location pkg-config .pc file)
      run: cmake --build ${{ steps.build_env.outputs.examples-with-pkg-config-build-output-dir }} --config ${{ matrix.config.build_type }}

    - name: Run showcase application (nonstd::source_location pkg-config .pc file)
      working-directory: ${{ steps.build_env.outputs.examples-with-pkg-config-build-output-dir }}
      run: ./source_location_example.app
