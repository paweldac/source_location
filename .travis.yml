os: linux
dist: bionic
language: cpp

cache:
  directories:
    - ${HOME}/deps/llvm-8.0.0
    - ${HOME}/deps/llvm-9.0.1
    - ${HOME}/deps/llvm-10.0.0
    - ${HOME}/deps/cmake-3.17.0

jobs:
  include:
    - os: osx
      env: BUILD_EXAMPLES=true BUILD_TESTS=true BUILD_TYPE=RelWithDebugInfo
      osx_image: xcode11.3
    - env: COMPILER=clang++-8 BUILD_EXAMPLES=true BUILD_TESTS=true MEMCHECK=true BUILD_TYPE=RelWithDebugInfo
      addons: {
        apt: {
          sources: [
            {
              sourceline: "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main",
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            }
          ],
          packages: ["clang-8", "valgrind"]
        }
      }
    - env: COMPILER=clang++-9 BUILD_EXAMPLES=true BUILD_TESTS=true MEMCHECK=true BUILD_TYPE=Debug
      addons: {
        apt: {
          sources: [
            {
              sourceline: "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main",
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            }
          ],
          packages: ["clang-9", "valgrind"]
        }
      }
    - env: COMPILER=clang++-10 BUILD_EXAMPLES=true BUILD_TESTS=true MEMCHECK=true BUILD_TYPE=Debug
      addons: {
        apt: {
          sources: [
            {
              sourceline: "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main",
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
            }
          ],
          packages: ["clang-10", "valgrind"]
        }
      }
    - env: COMPILER=g++-9 BUILD_EXAMPLES=true BUILD_TESTS=true MEMCHECK=true BUILD_TYPE=Debug
      addons: { apt: { packages: ["g++-9", "valgrind"], sources: ["ubuntu-toolchain-r-test"] } }
    - env: COMPILER=g++-8 BUILD_EXAMPLES=true BUILD_TESTS=true MEMCHECK=true BUILD_TYPE=Debug
      addons: { apt: { packages: ["g++-8", "valgrind"], sources: ["ubuntu-toolchain-r-test"] } }
    - env: COMPILER=g++-7 BUILD_EXAMPLES=true BUILD_TESTS=true MEMCHECK=true BUILD_TYPE=Debug
      addons: { apt: { packages: ["g++-7", "valgrind"], sources: ["ubuntu-toolchain-r-test"] } }
    - env: COMPILER=g++-6 BUILD_EXAMPLES=true BUILD_TESTS=true MEMCHECK=true BUILD_TYPE=RelWithDebugInfo
      addons: { apt: { packages: ["g++-6", "valgrind"], sources: ["ubuntu-toolchain-r-test"] } }
    - env: COMPILER=g++-5 BUILD_EXAMPLES=true BUILD_TESTS=true MEMCHECK=true BUILD_TYPE=RelWithDebugInfo
      addons: { apt: { packages: ["g++-5", "valgrind"], sources: ["ubuntu-toolchain-r-test"] } }
    - env: COMPILER=g++-4.8 BUILD_EXAMPLES=true BUILD_TESTS=true MEMCHECK=true BUILD_TYPE=RelWithDebugInfo
      addons: { apt: { packages: ["g++-4.8", "valgrind"], sources: ["ubuntu-toolchain-r-test"] } }

git:
  submodules: false

install:
  # All the dependencies are installed in ${HOME}/deps/
  - DEPS_DIR="${HOME}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
  - export PARALLEL_BUILD_JOBS="${PARALLEL_BUILD_JOBS:-$(nproc)}"
  # Set env variables
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi
  - ${CXX} --version
  # Prepare prefix root used for dependency installation
  - (mkdir -p ${HOME}/prefix_root/usr/includes && mkdir -p ${HOME}/prefix_root/usr/lib && mkdir -p ${HOME}/prefix_root/usr/share)
  # Set new gcc/clang in PATH
  - mkdir -p ${HOME}/.local/bin
  - |
    if [[ "${CXX%%+*}" == "clang" ]]; then
      ln -s /usr/bin/${COMPILER} ~/.local/bin/clang++
    else
      ln -s /usr/bin/${COMPILER} ~/.local/bin/g++
    fi
  - export PATH=${HOME}/.local/bin:${PATH}
  # Install CMake
  - CMAKE_MAJOR_VERSION=3.17
  - CMAKE_MINOR_VERSION=0
  - CMAKE_VERSION="${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}"
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [[ -z "$(ls -A ${DEPS_DIR}/cmake-${CMAKE_VERSION})" ]]; then
        CMAKE_URL="https://cmake.org/files/v${CMAKE_MAJOR_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
        mkdir -p cmake-${CMAKE_VERSION} && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake-${CMAKE_VERSION}
      fi
      export PATH=${DEPS_DIR}/cmake-${CMAKE_VERSION}/bin:${PATH}
    else
      brew install cmake || brew upgrade cmake
    fi
  - cmake --version

  # Install the right version of clang, libc++ and libc++abi
  - |
    if [[ "${CXX%%+*}" == "clang" ]]; then
      if   [[ "${CXX}" == "clang++-8" ]];   then LLVM_VERSION="8.0.0";
      elif [[ "${CXX}" == "clang++-9" ]];   then LLVM_VERSION="9.0.1";
      elif [[ "${CXX}" == "clang++-10" ]];  then LLVM_VERSION="10.0.0";
      fi

      if [[ "${CXX}" == "clang++-8" ]]; then
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
      else
        LLVM_URL="https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
      fi

      if [[ -z "$(ls -A ${DEPS_DIR}/llvm-${LLVM_VERSION})" ]]; then
        mkdir -p llvm-${LLVM_VERSION} llvm-${LLVM_VERSION}/build llvm-${LLVM_VERSION}/projects/libcxx llvm-${LLVM_VERSION}/projects/libcxxabi
        travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm-${LLVM_VERSION} || exit 1
        travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm-${LLVM_VERSION}/projects/libcxx || exit 1
        travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm-${LLVM_VERSION}/projects/libcxxabi || exit 1
        (cd llvm-${LLVM_VERSION}/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm-${LLVM_VERSION}/install) || exit 1
        (cd llvm-${LLVM_VERSION}/build/projects/libcxx && make install -j${PARALLEL_BUILD_JOBS}) || exit 1
        (cd llvm-${LLVM_VERSION}/build/projects/libcxxabi && make install -j${PARALLEL_BUILD_JOBS}) || exit 1
      fi

      export CXXFLAGS="-stdlib=libc++ -isystem ${DEPS_DIR}/llvm-${LLVM_VERSION}/install/include/c++/v1"
      export LDFLAGS="-L ${DEPS_DIR}/llvm-${LLVM_VERSION}/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm-${LLVM_VERSION}/install/lib"
    fi
 
before_script:
  - cd ${TRAVIS_BUILD_DIR}
  - (mkdir build && cd build && cmake .. -DCMAKE_INSTALL_PREFIX="${HOME}/prefix_root" -DCMAKE_CXX_STANDARD=11 -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DSOURCE_LOCATION_BUILD_TESTS=${BUILD_TESTS})

script:
  - cd build
  - |
    if [[ "${BUILD_TESTS}" == "true" ]]; then
      make source_location.ut -j${PARALLEL_BUILD_JOBS}
      if [[ "${MEMCHECK}" == "true" ]]; then
        if ! ctest --schedule-random --parallel ${PARALLEL_BUILD_JOBS} -D ExperimentalMemCheck --output-on-failure; then
          find Testing/Temporary -name "MemoryChecker.*.log" -exec cat {} +
          exit 1
        fi
      else
        ctest --schedule-random --output-on-failure --parallel ${PARALLEL_BUILD_JOBS} .
      fi
    fi
  - |
    if [[ "${BUILD_EXAMPLES}" == "true" ]]; then
      # install source_location to prefix_root
      make install

      # check examples compilation with exported cmake target
      cd ${TRAVIS_BUILD_DIR}/examples
      mkdir build_from_exported_cmake && cd build_from_exported_cmake
      cmake .. -DCMAKE_FIND_ROOT_PATH="${HOME}/prefix_root" -DEXAMPLES_USE_CMAKE_CMAKE_CONFIG=true
      make source_location_example.app -j${PARALLEL_BUILD_JOBS}
      ./source_location_example.app

      # check examples compilation with pkg-config .pc file
      cd ${TRAVIS_BUILD_DIR}/examples
      mkdir build_from_pc_config && cd build_from_pc_config
      cmake .. -DCMAKE_PREFIX_PATH="${HOME}/prefix_root" -DEXAMPLES_USE_CMAKE_CMAKE_CONFIG=false
      make source_location_example.app -j${PARALLEL_BUILD_JOBS}
      ./source_location_example.app
    fi